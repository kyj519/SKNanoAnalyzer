#include "MeasureJetTaggingR.h"
#include "JetTaggingParameter.h"
#include "VcbParameters.h"
//////////

MeasureJetTaggingR::MeasureJetTaggingR()
{
} // MeasureJetTaggingR::MeasureJetTaggingR

//////////

MeasureJetTaggingR::~MeasureJetTaggingR()
{
} // MeasureJetTaggingR::~MeasureJetTaggingR()

//////////

void MeasureJetTaggingR::SetAnalyzer(std::variant<Vcb_DL *, Vcb_FH *, Vcb_SL *> analyzer)
{

    // set channel
    if (std::holds_alternative<Vcb_DL *>(analyzer))
    {
        if (current_channel == "MM" || current_channel == "DL") // default channel is DL
            std::get<Vcb_DL *>(analyzer)->channel = Vcb::Channel::MM;
        else if (current_channel == "ME")
            std::get<Vcb_DL *>(analyzer)->channel = Vcb::Channel::ME;
        else if (current_channel == "EE")
            std::get<Vcb_DL *>(analyzer)->channel = Vcb::Channel::EE;
    }
    else if (std::holds_alternative<Vcb_SL *>(analyzer))
    {
        if (current_channel == "Mu" || current_channel == "SL") // default channel is SL
            std::get<Vcb_SL *>(analyzer)->channel = Vcb::Channel::Mu;
        else if (current_channel == "El")
            std::get<Vcb_SL *>(analyzer)->channel = Vcb::Channel::El;
    }
    else if (std::holds_alternative<Vcb_FH *>(analyzer))
    {
    }
    else
    {
        cout << "Invalid channel" << endl;
        exit(0);
    }

    current_analyzer = analyzer;
    std::visit([&](auto *analyzer)
               {
    if (analyzer) {
        analyzer->IsDATA = IsDATA;
        analyzer->DataEra = DataEra;
        analyzer->DataStream = DataStream;
        analyzer->SetEra(DataEra);
        analyzer->MCSample = MCSample;
        analyzer->xsec = xsec;
        analyzer->sumW = sumW;
        analyzer->sumSign = sumSign;
        analyzer->fChain = fChain;
        analyzer->Init();
        analyzer->initializeAnalyzer();
    } }, current_analyzer);
}

void MeasureJetTaggingR::initializeAnalyzer()
{

    myCorr = new MyCorrection(DataEra, IsDATA ? DataStream : MCSample, IsDATA);
    myCorr->SetTaggingParam(JetTagging::JetFlavTagger::DeepJet, JetTagging::JetFlavTaggerWP::Medium); // Temporary Initialisation
    TString datapath = getenv("DATA_DIR");
    TString btagpath = datapath + "/" + DataEra + "/BTag/";
    if (IsDATA)
    {
        cout << "Why you run this code on DATA?" << endl;
        exit(0);
    }
    Taggers.clear();
    WPs.clear();

    Taggers.push_back(JetTagging::JetFlavTagger::DeepJet);
    Taggers.push_back(JetTagging::JetFlavTagger::ParticleNet);
    Taggers.push_back(JetTagging::JetFlavTagger::ParT);

    vec_njetbin = {4, 5, 6, 7, 8, 10, 12, 14, 20};
    vec_htbins = {80, 180, 230, 280, 330, 400, 500, 1000};
    vec_nTrueIntbin = {0, 20, 25, 30, 35, 40, 50, 70};
    vec_jet_ptbin = {25, 27, 30, 35, 40, 45, 50, 70, 90, 120, 150, 200, 300, 500};
    vec_jet_etabin = {0., 0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.48, 1.80, 2.10, 2.40};
    //superfine binning pt 25 to 1000 with 2GeV binning
    float pt = 25;
    while (pt < 1000)
    {
        vec_jet_superfine_ptbin.push_back(pt);
        pt += 2;
    }
    float eta = 0;
    while (eta < 2.4)
    {
        vec_jet_superfine_etabin.push_back(eta);
        eta += 0.1;
    }



    n_vec_njetbin = vec_njetbin.size() - 1;
    n_vec_htbins = vec_htbins.size() - 1;
    n_vec_nTrueIntbin = vec_nTrueIntbin.size() - 1;

    if (HasFlag("El"))
        current_channel = "El";
    else if (HasFlag("Mu"))
        current_channel = "Mu";
    else if (HasFlag("MM"))
        current_channel = "MM";
    else if (HasFlag("EE"))
        current_channel = "EE";
    else if (HasFlag("ME"))
        current_channel = "ME";
    else if (HasFlag("DL"))
        current_channel = "DL";
    else if (HasFlag("SL"))
        current_channel = "SL";
    else
        current_channel = "FH";
    cout << "Will run on " << current_channel << " channel" << endl;

    if (current_channel == "FH")
        SetAnalyzer(new Vcb_FH());
    else if (current_channel == "Mu" || current_channel == "El" || current_channel == "SL")
        SetAnalyzer(new Vcb_SL());
    else if (current_channel == "MM" || current_channel == "ME" || current_channel == "EE" || current_channel == "DL")
        SetAnalyzer(new Vcb_DL());
    else
    {
        cout << "Invalid channel" << endl;
        exit(0);
    }
    //optimized bin

Vcb_SL_pt_binning_flav_5 = {
{"TTLJ", {25.00,27.00,29.00,31.00,33.00,35.00,37.00,39.00,41.00,43.00,45.00,47.00,49.00,51.00,53.00,55.00,57.00,59.00,61.00,63.00,65.00,67.00,69.00,71.00,73.00,75.00,77.00,79.00,81.00,83.00,85.00,87.00,89.00,91.00,93.00,95.00,97.00,99.00,101.00,103.00,105.00,107.00,109.00,111.00,113.00,115.00,117.00,119.00,121.00,123.00,125.00,127.00,129.00,131.00,133.00,135.00,137.00,139.00,141.00,143.00,145.00,147.00,149.00,151.00,153.00,155.00,157.00,159.00,161.00,163.00,167.00,171.00,175.00,179.00,183.00,187.00,191.00,195.00,199.00,205.00,211.00,217.00,225.00,235.00,245.00,259.00,277.00,305.00,359.00,999.00,}},
{"TTLJ_Vcb", {25.00,27.00,29.00,31.00,33.00,35.00,37.00,39.00,41.00,43.00,45.00,47.00,49.00,51.00,53.00,55.00,57.00,59.00,61.00,63.00,65.00,67.00,69.00,71.00,73.00,75.00,77.00,79.00,81.00,83.00,85.00,87.00,89.00,91.00,93.00,95.00,97.00,99.00,101.00,103.00,105.00,107.00,109.00,111.00,113.00,115.00,117.00,119.00,121.00,123.00,125.00,127.00,129.00,131.00,133.00,135.00,137.00,139.00,141.00,143.00,145.00,147.00,151.00,155.00,159.00,163.00,167.00,171.00,175.00,179.00,183.00,189.00,195.00,201.00,209.00,219.00,231.00,245.00,263.00,291.00,349.00,999.00,}},
{"TTLL", {25.00,27.00,29.00,31.00,33.00,35.00,37.00,39.00,41.00,43.00,45.00,47.00,49.00,51.00,53.00,55.00,57.00,59.00,61.00,63.00,65.00,67.00,69.00,71.00,73.00,75.00,77.00,79.00,81.00,83.00,85.00,87.00,89.00,91.00,93.00,95.00,97.00,99.00,101.00,103.00,105.00,107.00,109.00,111.00,113.00,115.00,117.00,119.00,121.00,123.00,125.00,127.00,129.00,131.00,133.00,135.00,137.00,139.00,141.00,143.00,145.00,147.00,149.00,151.00,153.00,155.00,157.00,159.00,161.00,163.00,165.00,167.00,169.00,171.00,173.00,175.00,177.00,179.00,181.00,183.00,185.00,187.00,189.00,191.00,193.00,195.00,197.00,199.00,201.00,203.00,205.00,207.00,209.00,211.00,213.00,215.00,217.00,219.00,221.00,223.00,225.00,227.00,229.00,231.00,233.00,235.00,239.00,243.00,247.00,251.00,255.00,259.00,263.00,267.00,271.00,275.00,279.00,285.00,291.00,297.00,303.00,311.00,319.00,329.00,339.00,351.00,365.00,383.00,407.00,437.00,481.00,563.00,999.00,}},
{"VJets", {25.00,27.00,29.00,31.00,33.00,35.00,37.00,39.00,41.00,43.00,45.00,47.00,49.00,51.00,53.00,55.00,57.00,59.00,61.00,63.00,65.00,67.00,69.00,71.00,73.00,75.00,77.00,79.00,81.00,83.00,85.00,87.00,89.00,93.00,97.00,101.00,105.00,109.00,113.00,117.00,121.00,125.00,129.00,135.00,141.00,147.00,153.00,161.00,169.00,179.00,191.00,203.00,215.00,233.00,255.00,285.00,327.00,403.00,999.00,}},
{"ST", {25.00,27.00,29.00,31.00,33.00,35.00,37.00,39.00,41.00,43.00,45.00,47.00,49.00,51.00,53.00,55.00,57.00,59.00,61.00,63.00,65.00,67.00,69.00,71.00,73.00,75.00,77.00,79.00,81.00,83.00,85.00,87.00,89.00,91.00,93.00,95.00,97.00,99.00,101.00,103.00,105.00,107.00,109.00,111.00,113.00,115.00,117.00,119.00,121.00,123.00,125.00,127.00,129.00,131.00,133.00,135.00,137.00,139.00,141.00,143.00,145.00,147.00,149.00,151.00,153.00,155.00,157.00,159.00,161.00,163.00,167.00,171.00,175.00,179.00,183.00,187.00,191.00,195.00,199.00,203.00,207.00,213.00,219.00,225.00,231.00,239.00,247.00,255.00,265.00,275.00,287.00,299.00,313.00,329.00,349.00,373.00,403.00,445.00,503.00,607.00,999.00,}},
{"ttV", {25.00,27.00,29.00,31.00,33.00,35.00,37.00,39.00,41.00,43.00,45.00,47.00,49.00,51.00,53.00,55.00,57.00,59.00,61.00,63.00,65.00,67.00,69.00,71.00,73.00,75.00,77.00,79.00,81.00,83.00,85.00,87.00,89.00,91.00,93.00,95.00,97.00,99.00,101.00,103.00,105.00,107.00,109.00,111.00,113.00,115.00,117.00,119.00,121.00,123.00,125.00,127.00,129.00,131.00,133.00,135.00,137.00,139.00,141.00,143.00,145.00,147.00,149.00,151.00,153.00,155.00,157.00,159.00,161.00,163.00,165.00,167.00,169.00,171.00,173.00,175.00,177.00,179.00,181.00,183.00,185.00,187.00,191.00,195.00,199.00,203.00,207.00,211.00,215.00,219.00,223.00,227.00,233.00,239.00,245.00,251.00,259.00,267.00,275.00,285.00,297.00,311.00,327.00,349.00,379.00,425.00,513.00,999.00,}},
{"VV", {25.00,27.00,29.00,31.00,33.00,35.00,37.00,39.00,41.00,43.00,45.00,47.00,49.00,51.00,53.00,55.00,57.00,59.00,61.00,63.00,65.00,67.00,69.00,71.00,73.00,75.00,77.00,79.00,81.00,83.00,85.00,87.00,89.00,91.00,95.00,99.00,103.00,107.00,111.00,115.00,119.00,123.00,127.00,133.00,139.00,145.00,151.00,159.00,167.00,175.00,185.00,197.00,211.00,227.00,249.00,279.00,323.00,409.00,999.00,}},
{"QCD", {25.00,31.00,39.00,47.00,57.00,67.00,79.00,93.00,109.00,125.00,145.00,169.00,191.00,219.00,249.00,285.00,327.00,375.00,429.00,493.00,619.00,999.00,}},
};
Vcb_SL_eta_binning_flav_5 = {
{"TTLJ", {0.00,0.10,0.50,0.70,0.90,1.20,1.50,2.40,}},
{"TTLJ_Vcb", {0.00,0.10,0.50,0.70,0.90,1.20,1.50,2.40,}},
{"TTLL", {0.00,0.20,0.60,0.80,1.00,1.30,2.40,}},
{"VJets", {0.00,0.10,0.70,1.00,1.40,2.40,}},
{"ST", {0.00,0.20,0.60,0.80,1.00,1.30,2.40,}},
{"ttV", {0.00,0.20,0.60,0.80,1.00,1.30,2.40,}},
{"VV", {0.00,0.10,0.50,0.70,0.90,1.20,1.50,2.40,}},
{"QCD", {0.00,0.20,1.20,2.40,}},
};
Vcb_SL_pt_binning_flav_4 = {
{"TTLJ", {25.00,27.00,29.00,31.00,33.00,35.00,37.00,39.00,41.00,43.00,45.00,47.00,49.00,51.00,53.00,55.00,57.00,59.00,61.00,63.00,65.00,67.00,69.00,71.00,73.00,75.00,77.00,79.00,81.00,83.00,85.00,87.00,89.00,91.00,93.00,95.00,99.00,103.00,107.00,111.00,115.00,119.00,123.00,129.00,135.00,141.00,147.00,155.00,165.00,177.00,191.00,211.00,241.00,303.00,999.00,}},
{"TTLJ_Vcb", {25.00,27.00,29.00,31.00,33.00,35.00,37.00,39.00,41.00,43.00,45.00,47.00,49.00,51.00,53.00,55.00,57.00,59.00,61.00,63.00,65.00,67.00,69.00,71.00,73.00,75.00,77.00,79.00,81.00,83.00,85.00,87.00,89.00,91.00,93.00,95.00,99.00,103.00,107.00,111.00,115.00,119.00,123.00,127.00,133.00,139.00,145.00,153.00,161.00,171.00,183.00,199.00,223.00,267.00,999.00,}},
{"TTLL", {25.00,27.00,29.00,31.00,33.00,35.00,37.00,39.00,41.00,43.00,45.00,47.00,49.00,51.00,53.00,55.00,57.00,59.00,61.00,63.00,65.00,67.00,69.00,71.00,73.00,75.00,77.00,79.00,81.00,85.00,89.00,93.00,97.00,101.00,105.00,109.00,113.00,117.00,121.00,127.00,133.00,139.00,145.00,151.00,159.00,167.00,177.00,187.00,199.00,213.00,229.00,249.00,273.00,305.00,353.00,441.00,999.00,}},
{"VJets", {25.00,27.00,29.00,31.00,33.00,35.00,37.00,39.00,41.00,43.00,45.00,47.00,49.00,51.00,53.00,55.00,57.00,59.00,61.00,63.00,65.00,67.00,69.00,71.00,73.00,75.00,77.00,79.00,81.00,83.00,85.00,87.00,89.00,91.00,93.00,95.00,97.00,99.00,101.00,103.00,105.00,107.00,109.00,111.00,113.00,115.00,117.00,119.00,121.00,123.00,125.00,127.00,129.00,131.00,133.00,135.00,137.00,139.00,141.00,143.00,145.00,147.00,149.00,151.00,153.00,155.00,157.00,161.00,165.00,169.00,173.00,177.00,181.00,185.00,189.00,193.00,197.00,201.00,205.00,209.00,215.00,221.00,227.00,233.00,239.00,247.00,255.00,263.00,273.00,285.00,297.00,311.00,327.00,347.00,371.00,405.00,455.00,539.00,999.00,}},
{"ST", {25.00,27.00,29.00,31.00,33.00,35.00,37.00,39.00,41.00,43.00,45.00,47.00,49.00,51.00,53.00,55.00,57.00,59.00,61.00,63.00,65.00,67.00,69.00,71.00,73.00,75.00,77.00,79.00,81.00,83.00,85.00,87.00,89.00,91.00,95.00,99.00,103.00,107.00,111.00,115.00,119.00,123.00,129.00,135.00,141.00,147.00,155.00,163.00,173.00,185.00,199.00,217.00,243.00,287.00,387.00,999.00,}},
{"ttV", {25.00,27.00,29.00,31.00,33.00,35.00,37.00,39.00,41.00,43.00,45.00,47.00,49.00,51.00,53.00,55.00,57.00,59.00,61.00,63.00,65.00,67.00,69.00,71.00,73.00,75.00,77.00,79.00,81.00,83.00,85.00,87.00,89.00,91.00,93.00,95.00,97.00,99.00,103.00,107.00,111.00,115.00,119.00,123.00,127.00,131.00,135.00,141.00,147.00,153.00,159.00,167.00,175.00,185.00,195.00,209.00,225.00,245.00,273.00,319.00,409.00,999.00,}},
{"VV", {25.00,27.00,29.00,31.00,33.00,35.00,37.00,39.00,41.00,43.00,45.00,47.00,49.00,51.00,53.00,55.00,57.00,59.00,61.00,63.00,65.00,67.00,69.00,71.00,73.00,75.00,77.00,79.00,81.00,83.00,85.00,87.00,89.00,91.00,93.00,95.00,97.00,99.00,101.00,103.00,105.00,107.00,109.00,111.00,113.00,115.00,117.00,119.00,121.00,123.00,125.00,127.00,129.00,131.00,133.00,135.00,137.00,139.00,141.00,143.00,145.00,147.00,149.00,151.00,153.00,155.00,157.00,159.00,161.00,163.00,165.00,167.00,169.00,171.00,173.00,175.00,177.00,179.00,181.00,185.00,189.00,193.00,197.00,201.00,205.00,209.00,213.00,217.00,221.00,225.00,229.00,233.00,239.00,245.00,251.00,257.00,263.00,271.00,279.00,287.00,297.00,307.00,319.00,333.00,349.00,367.00,387.00,411.00,441.00,479.00,535.00,627.00,999.00,}},
{"QCD", {25.00,29.00,33.00,37.00,43.00,49.00,57.00,65.00,73.00,81.00,91.00,101.00,113.00,125.00,141.00,155.00,173.00,189.00,207.00,229.00,253.00,277.00,301.00,327.00,359.00,391.00,427.00,465.00,511.00,571.00,637.00,725.00,999.00,}},
};
Vcb_SL_eta_binning_flav_4 = {
{"TTLJ", {0.00,0.20,0.60,0.80,1.00,1.30,1.70,2.40,}},
{"TTLJ_Vcb", {0.00,0.10,0.50,0.70,0.90,1.10,1.40,1.70,2.40,}},
{"TTLL", {0.00,0.20,0.80,1.10,1.40,1.70,2.40,}},
{"VJets", {0.00,0.10,0.70,1.00,1.40,2.40,}},
{"ST", {0.00,0.10,0.50,0.70,0.90,1.20,1.50,2.40,}},
{"ttV", {0.00,0.10,0.50,0.70,0.90,1.20,1.50,2.40,}},
{"VV", {0.00,0.10,0.50,0.70,0.90,1.20,1.50,2.40,}},
{"QCD", {0.00,0.30,1.20,2.40,}},
};
Vcb_SL_pt_binning_flav_0 = {
{"TTLJ", {25.00,27.00,29.00,31.00,33.00,35.00,37.00,39.00,41.00,43.00,45.00,47.00,49.00,51.00,53.00,55.00,57.00,59.00,61.00,63.00,65.00,67.00,69.00,71.00,73.00,75.00,77.00,79.00,81.00,83.00,85.00,87.00,89.00,91.00,93.00,95.00,97.00,99.00,101.00,103.00,105.00,107.00,109.00,111.00,113.00,115.00,117.00,119.00,121.00,123.00,125.00,127.00,129.00,131.00,133.00,135.00,137.00,139.00,141.00,143.00,145.00,147.00,149.00,151.00,153.00,155.00,157.00,159.00,161.00,165.00,169.00,173.00,177.00,181.00,185.00,189.00,193.00,197.00,203.00,209.00,215.00,221.00,229.00,237.00,245.00,255.00,267.00,279.00,295.00,313.00,337.00,369.00,415.00,495.00,999.00,}},
{"TTLJ_Vcb", {25.00,27.00,29.00,31.00,33.00,35.00,37.00,39.00,41.00,43.00,45.00,47.00,49.00,51.00,53.00,55.00,57.00,59.00,61.00,63.00,65.00,67.00,69.00,71.00,73.00,75.00,77.00,79.00,81.00,83.00,85.00,87.00,89.00,91.00,93.00,95.00,99.00,103.00,107.00,111.00,115.00,119.00,123.00,127.00,131.00,137.00,143.00,149.00,155.00,163.00,171.00,179.00,189.00,201.00,215.00,231.00,249.00,273.00,303.00,349.00,429.00,999.00,}},
{"TTLL", {25.00,27.00,29.00,31.00,33.00,35.00,37.00,39.00,41.00,43.00,45.00,47.00,49.00,51.00,53.00,55.00,57.00,59.00,61.00,63.00,65.00,67.00,69.00,71.00,73.00,75.00,77.00,79.00,81.00,83.00,85.00,87.00,89.00,91.00,93.00,95.00,97.00,99.00,101.00,103.00,105.00,107.00,109.00,111.00,113.00,115.00,117.00,119.00,121.00,123.00,125.00,127.00,129.00,131.00,133.00,135.00,137.00,139.00,141.00,143.00,145.00,147.00,149.00,151.00,153.00,155.00,157.00,159.00,161.00,163.00,165.00,167.00,169.00,171.00,173.00,175.00,177.00,179.00,181.00,183.00,185.00,187.00,189.00,191.00,193.00,195.00,197.00,199.00,201.00,203.00,205.00,207.00,209.00,211.00,213.00,215.00,217.00,219.00,221.00,223.00,225.00,227.00,229.00,231.00,233.00,235.00,237.00,239.00,241.00,243.00,245.00,247.00,249.00,251.00,253.00,255.00,259.00,263.00,267.00,271.00,275.00,279.00,283.00,287.00,291.00,295.00,299.00,303.00,307.00,311.00,315.00,319.00,323.00,329.00,335.00,341.00,347.00,353.00,359.00,367.00,375.00,383.00,391.00,399.00,409.00,419.00,431.00,443.00,457.00,473.00,491.00,511.00,535.00,565.00,603.00,657.00,745.00,999.00,}},
{"VJets", {25.00,27.00,29.00,31.00,33.00,35.00,37.00,39.00,41.00,43.00,45.00,47.00,49.00,51.00,53.00,55.00,57.00,59.00,61.00,63.00,65.00,67.00,69.00,71.00,73.00,75.00,77.00,79.00,81.00,83.00,85.00,87.00,89.00,91.00,93.00,95.00,97.00,99.00,101.00,103.00,105.00,107.00,109.00,111.00,113.00,115.00,117.00,119.00,121.00,123.00,125.00,127.00,129.00,131.00,133.00,135.00,137.00,139.00,141.00,143.00,145.00,147.00,149.00,151.00,153.00,155.00,157.00,159.00,161.00,163.00,165.00,167.00,169.00,171.00,173.00,175.00,177.00,179.00,181.00,183.00,185.00,187.00,189.00,191.00,193.00,195.00,197.00,199.00,201.00,203.00,205.00,207.00,209.00,211.00,213.00,215.00,217.00,219.00,221.00,223.00,225.00,227.00,229.00,231.00,233.00,235.00,237.00,239.00,241.00,243.00,245.00,247.00,249.00,251.00,253.00,255.00,257.00,259.00,261.00,263.00,265.00,267.00,269.00,271.00,273.00,275.00,277.00,279.00,281.00,283.00,285.00,287.00,289.00,291.00,293.00,295.00,297.00,299.00,301.00,303.00,305.00,307.00,309.00,311.00,313.00,315.00,317.00,321.00,323.00,327.00,329.00,333.00,337.00,341.00,345.00,349.00,353.00,357.00,361.00,365.00,369.00,373.00,377.00,381.00,385.00,389.00,393.00,397.00,403.00,409.00,415.00,421.00,427.00,433.00,439.00,447.00,455.00,463.00,471.00,479.00,489.00,501.00,513.00,527.00,541.00,559.00,577.00,601.00,627.00,663.00,713.00,797.00,999.00,}},
{"ST", {25.00,27.00,29.00,31.00,33.00,35.00,37.00,39.00,41.00,43.00,45.00,47.00,49.00,51.00,53.00,55.00,57.00,59.00,61.00,63.00,65.00,67.00,69.00,71.00,73.00,75.00,77.00,79.00,81.00,83.00,85.00,87.00,89.00,91.00,93.00,95.00,97.00,99.00,101.00,103.00,105.00,107.00,109.00,111.00,113.00,115.00,117.00,119.00,121.00,123.00,125.00,127.00,129.00,131.00,133.00,135.00,137.00,139.00,141.00,143.00,145.00,147.00,149.00,151.00,153.00,155.00,157.00,159.00,161.00,163.00,165.00,167.00,171.00,175.00,179.00,183.00,187.00,191.00,195.00,199.00,203.00,207.00,211.00,215.00,221.00,227.00,233.00,239.00,247.00,255.00,263.00,273.00,283.00,295.00,309.00,325.00,345.00,371.00,405.00,453.00,537.00,999.00,}},
{"ttV", {25.00,27.00,29.00,31.00,33.00,35.00,37.00,39.00,41.00,43.00,45.00,47.00,49.00,51.00,53.00,55.00,57.00,59.00,61.00,63.00,65.00,67.00,69.00,71.00,73.00,75.00,77.00,79.00,81.00,83.00,85.00,87.00,89.00,91.00,93.00,95.00,97.00,99.00,101.00,103.00,105.00,107.00,109.00,111.00,113.00,115.00,117.00,119.00,121.00,123.00,125.00,127.00,129.00,131.00,133.00,135.00,137.00,139.00,141.00,143.00,145.00,147.00,149.00,151.00,153.00,155.00,157.00,159.00,161.00,163.00,167.00,171.00,175.00,179.00,183.00,187.00,191.00,195.00,199.00,203.00,207.00,211.00,217.00,223.00,229.00,235.00,243.00,251.00,259.00,269.00,279.00,291.00,303.00,317.00,335.00,355.00,379.00,409.00,449.00,507.00,605.00,999.00,}},
{"VV", {25.00,27.00,29.00,31.00,33.00,35.00,37.00,39.00,41.00,43.00,45.00,47.00,49.00,51.00,53.00,55.00,57.00,59.00,61.00,63.00,65.00,67.00,69.00,71.00,73.00,75.00,77.00,79.00,81.00,83.00,85.00,87.00,89.00,91.00,93.00,95.00,97.00,99.00,101.00,103.00,105.00,107.00,109.00,111.00,113.00,115.00,117.00,119.00,121.00,123.00,125.00,127.00,129.00,131.00,133.00,135.00,137.00,139.00,141.00,143.00,145.00,147.00,149.00,151.00,153.00,155.00,157.00,159.00,161.00,163.00,165.00,167.00,169.00,171.00,173.00,175.00,177.00,179.00,181.00,183.00,185.00,187.00,189.00,191.00,193.00,195.00,197.00,199.00,201.00,203.00,205.00,207.00,209.00,211.00,213.00,215.00,217.00,219.00,221.00,223.00,225.00,227.00,229.00,231.00,233.00,235.00,237.00,239.00,241.00,243.00,245.00,247.00,249.00,251.00,253.00,255.00,257.00,259.00,261.00,263.00,265.00,267.00,269.00,271.00,273.00,275.00,277.00,279.00,281.00,283.00,285.00,287.00,289.00,291.00,293.00,295.00,297.00,299.00,301.00,303.00,305.00,307.00,309.00,311.00,313.00,315.00,317.00,319.00,321.00,323.00,325.00,327.00,331.00,335.00,339.00,343.00,347.00,351.00,355.00,359.00,363.00,367.00,371.00,375.00,379.00,383.00,387.00,391.00,395.00,401.00,407.00,413.00,419.00,425.00,431.00,437.00,443.00,451.00,459.00,467.00,475.00,485.00,495.00,507.00,519.00,531.00,545.00,561.00,579.00,599.00,623.00,653.00,691.00,743.00,823.00,999.00,}},
{"QCD", {25.00,27.00,29.00,31.00,33.00,35.00,37.00,39.00,41.00,43.00,45.00,47.00,49.00,51.00,53.00,55.00,57.00,59.00,61.00,63.00,65.00,67.00,69.00,71.00,73.00,75.00,77.00,79.00,81.00,83.00,85.00,87.00,89.00,91.00,93.00,95.00,97.00,99.00,101.00,103.00,105.00,107.00,109.00,111.00,113.00,115.00,117.00,119.00,121.00,123.00,125.00,127.00,129.00,131.00,133.00,135.00,137.00,139.00,141.00,143.00,145.00,147.00,149.00,151.00,153.00,155.00,157.00,159.00,161.00,163.00,167.00,169.00,173.00,177.00,179.00,183.00,187.00,191.00,195.00,199.00,203.00,207.00,211.00,215.00,219.00,223.00,227.00,231.00,235.00,239.00,243.00,247.00,251.00,255.00,259.00,263.00,267.00,271.00,275.00,279.00,283.00,287.00,291.00,295.00,299.00,303.00,307.00,311.00,315.00,319.00,323.00,327.00,331.00,335.00,339.00,343.00,347.00,351.00,355.00,359.00,363.00,367.00,373.00,379.00,385.00,391.00,397.00,403.00,409.00,415.00,421.00,427.00,433.00,439.00,445.00,451.00,457.00,463.00,469.00,475.00,481.00,487.00,493.00,499.00,507.00,513.00,519.00,527.00,535.00,543.00,551.00,559.00,565.00,573.00,581.00,589.00,597.00,605.00,615.00,625.00,637.00,649.00,659.00,671.00,683.00,697.00,711.00,725.00,741.00,757.00,777.00,801.00,825.00,859.00,901.00,999.00,}},
};
Vcb_SL_eta_binning_flav_0 = {
{"TTLJ", {0.00,0.10,0.50,0.70,0.90,1.20,1.50,1.80,2.40,}},
{"TTLJ_Vcb", {0.00,0.10,0.70,1.00,1.30,1.60,1.90,2.40,}},
{"TTLL", {0.00,0.10,0.70,1.00,1.30,1.60,2.40,}},
{"VJets", {0.00,0.30,0.90,1.30,2.40,}},
{"ST", {0.00,0.20,0.60,0.80,1.10,1.40,1.70,2.40,}},
{"ttV", {0.00,0.20,0.60,0.80,1.10,1.40,1.70,2.40,}},
{"VV", {0.00,0.20,0.60,0.80,1.00,1.30,2.40,}},
{"QCD", {0.00,0.30,1.30,2.40,}},
};

Vcb_DL_pt_binning_flav_5 = {
{"TTLJ", {25.00,27.00,29.00,31.00,33.00,35.00,37.00,39.00,41.00,43.00,45.00,47.00,49.00,51.00,53.00,55.00,57.00,61.00,63.00,67.00,71.00,75.00,79.00,83.00,87.00,91.00,95.00,99.00,103.00,107.00,111.00,117.00,123.00,129.00,137.00,145.00,155.00,165.00,179.00,197.00,219.00,265.00,999.00,}},
{"TTLJ_Vcb", {25.00,29.00,45.00,63.00,87.00,127.00,999.00,}},
{"TTLL", {25.00,27.00,29.00,31.00,33.00,35.00,37.00,39.00,41.00,43.00,45.00,47.00,49.00,51.00,53.00,55.00,57.00,59.00,61.00,63.00,65.00,67.00,69.00,71.00,73.00,75.00,77.00,79.00,81.00,83.00,85.00,87.00,89.00,91.00,93.00,95.00,97.00,99.00,101.00,103.00,105.00,107.00,109.00,111.00,113.00,115.00,117.00,119.00,121.00,123.00,125.00,127.00,129.00,131.00,133.00,135.00,137.00,139.00,141.00,143.00,145.00,147.00,149.00,151.00,153.00,155.00,157.00,159.00,161.00,163.00,165.00,167.00,169.00,171.00,173.00,175.00,177.00,179.00,181.00,183.00,185.00,187.00,189.00,191.00,193.00,195.00,197.00,199.00,201.00,203.00,205.00,207.00,209.00,211.00,213.00,215.00,217.00,219.00,221.00,223.00,225.00,227.00,229.00,231.00,233.00,237.00,241.00,245.00,249.00,253.00,257.00,261.00,265.00,269.00,273.00,279.00,285.00,291.00,299.00,307.00,315.00,325.00,339.00,355.00,377.00,409.00,467.00,999.00,}},
{"VJets", {25.00,51.00,999.00,}},
{"ST", {25.00,27.00,29.00,31.00,33.00,35.00,37.00,39.00,41.00,43.00,45.00,47.00,49.00,51.00,53.00,55.00,57.00,59.00,61.00,63.00,65.00,67.00,69.00,71.00,73.00,75.00,77.00,79.00,81.00,83.00,85.00,87.00,89.00,91.00,93.00,95.00,97.00,99.00,101.00,103.00,105.00,107.00,109.00,111.00,113.00,115.00,117.00,119.00,121.00,123.00,125.00,127.00,129.00,131.00,133.00,135.00,137.00,139.00,141.00,143.00,145.00,147.00,149.00,151.00,153.00,155.00,157.00,159.00,161.00,163.00,165.00,167.00,169.00,171.00,173.00,175.00,177.00,179.00,181.00,183.00,185.00,187.00,189.00,191.00,193.00,195.00,197.00,199.00,201.00,203.00,205.00,207.00,209.00,211.00,213.00,215.00,217.00,219.00,221.00,225.00,229.00,231.00,233.00,237.00,241.00,245.00,249.00,253.00,257.00,261.00,265.00,269.00,273.00,277.00,281.00,285.00,289.00,295.00,299.00,303.00,309.00,315.00,321.00,327.00,333.00,339.00,345.00,353.00,361.00,369.00,379.00,389.00,399.00,411.00,423.00,437.00,453.00,469.00,487.00,505.00,527.00,551.00,579.00,617.00,661.00,723.00,813.00,999.00,}},
{"ttV", {25.00,27.00,29.00,31.00,33.00,35.00,37.00,39.00,41.00,43.00,45.00,47.00,49.00,51.00,53.00,55.00,57.00,59.00,61.00,63.00,65.00,67.00,69.00,71.00,73.00,75.00,77.00,79.00,81.00,83.00,85.00,87.00,89.00,91.00,93.00,95.00,97.00,99.00,101.00,103.00,105.00,107.00,109.00,111.00,113.00,115.00,117.00,119.00,121.00,123.00,125.00,127.00,129.00,131.00,133.00,135.00,137.00,139.00,141.00,143.00,145.00,147.00,149.00,151.00,153.00,155.00,157.00,159.00,161.00,163.00,165.00,167.00,169.00,171.00,173.00,175.00,177.00,179.00,181.00,183.00,185.00,187.00,189.00,191.00,193.00,195.00,197.00,199.00,201.00,203.00,205.00,207.00,209.00,211.00,213.00,217.00,221.00,225.00,229.00,233.00,237.00,241.00,245.00,249.00,253.00,257.00,263.00,269.00,275.00,281.00,287.00,295.00,303.00,313.00,325.00,339.00,355.00,375.00,405.00,449.00,537.00,999.00,}},
{"VV", {25.00,29.00,35.00,41.00,47.00,55.00,65.00,77.00,91.00,109.00,133.00,167.00,237.00,999.00,}},
};
Vcb_DL_eta_binning_flav_5 = {
{"TTLJ", {0.00,0.30,1.20,2.40,}},
{"TTLJ_Vcb", {0.00,0.70,2.40,}},
{"TTLL", {0.00,0.10,0.50,0.70,0.90,1.20,1.50,2.40,}},
{"VJets", {0.00,0.10,2.40,}},
{"ST", {0.00,0.20,1.00,2.40,}},
{"ttV", {0.00,0.10,0.50,0.70,0.90,1.20,2.40,}},
{"VV", {0.00,0.30,1.40,2.40,}},
};
Vcb_DL_pt_binning_flav_4 = {
{"TTLJ", {25.00,27.00,31.00,35.00,39.00,43.00,47.00,51.00,55.00,59.00,63.00,67.00,73.00,79.00,85.00,93.00,101.00,113.00,127.00,145.00,171.00,221.00,999.00,}},
{"TTLJ_Vcb", {25.00,39.00,73.00,999.00,}},
{"TTLL", {25.00,27.00,29.00,31.00,33.00,35.00,37.00,39.00,41.00,43.00,45.00,47.00,49.00,51.00,53.00,55.00,57.00,59.00,61.00,63.00,65.00,67.00,69.00,71.00,73.00,75.00,77.00,79.00,81.00,83.00,87.00,91.00,95.00,99.00,103.00,107.00,111.00,115.00,119.00,123.00,127.00,133.00,139.00,145.00,151.00,159.00,167.00,175.00,185.00,195.00,207.00,219.00,233.00,251.00,271.00,299.00,335.00,383.00,473.00,999.00,}},
{"VJets", {25.00,49.00,99.00,999.00,}},
{"ST", {25.00,27.00,29.00,31.00,33.00,35.00,37.00,39.00,41.00,43.00,45.00,47.00,49.00,51.00,53.00,55.00,57.00,61.00,65.00,69.00,73.00,77.00,81.00,85.00,89.00,95.00,101.00,107.00,113.00,121.00,129.00,139.00,149.00,163.00,179.00,197.00,219.00,249.00,303.00,385.00,999.00,}},
{"ttV", {25.00,27.00,29.00,31.00,33.00,35.00,37.00,39.00,41.00,43.00,45.00,47.00,49.00,51.00,53.00,55.00,57.00,59.00,61.00,63.00,65.00,67.00,69.00,71.00,73.00,75.00,77.00,79.00,81.00,83.00,85.00,87.00,89.00,91.00,95.00,99.00,103.00,107.00,111.00,115.00,119.00,123.00,127.00,131.00,137.00,143.00,149.00,155.00,161.00,169.00,177.00,187.00,199.00,211.00,227.00,247.00,271.00,307.00,359.00,453.00,999.00,}},
{"VV", {25.00,27.00,29.00,31.00,33.00,35.00,37.00,39.00,41.00,45.00,49.00,53.00,57.00,61.00,65.00,71.00,77.00,83.00,89.00,97.00,105.00,115.00,125.00,137.00,151.00,167.00,185.00,211.00,241.00,285.00,371.00,999.00,}},
};
Vcb_DL_eta_binning_flav_4 = {
{"TTLJ", {0.00,0.10,1.00,1.50,2.40,}},
{"TTLJ_Vcb", {0.00,0.20,1.30,2.40,}},
{"TTLL", {0.00,0.20,0.80,1.10,1.40,1.70,2.40,}},
{"VJets", {0.00,0.40,1.40,2.40,}},
{"ST", {0.00,0.40,1.50,2.40,}},
{"ttV", {0.00,0.10,0.50,0.70,0.90,1.20,1.60,2.40,}},
{"VV", {0.00,0.10,1.20,2.40,}},
};
Vcb_DL_pt_binning_flav_0 = {
{"TTLJ", {25.00,27.00,29.00,31.00,33.00,35.00,37.00,39.00,41.00,43.00,45.00,47.00,49.00,51.00,53.00,55.00,57.00,59.00,61.00,63.00,65.00,67.00,69.00,71.00,73.00,75.00,77.00,79.00,81.00,83.00,85.00,87.00,89.00,91.00,93.00,95.00,97.00,99.00,101.00,105.00,109.00,113.00,117.00,121.00,125.00,129.00,133.00,137.00,141.00,147.00,153.00,159.00,167.00,175.00,183.00,193.00,205.00,219.00,235.00,257.00,289.00,333.00,405.00,999.00,}},
{"TTLJ_Vcb", {25.00,27.00,35.00,47.00,67.00,119.00,999.00,}},
{"TTLL", {25.00,27.00,29.00,31.00,33.00,35.00,37.00,39.00,41.00,43.00,45.00,47.00,49.00,51.00,53.00,55.00,57.00,59.00,61.00,63.00,65.00,67.00,69.00,71.00,73.00,75.00,77.00,79.00,81.00,83.00,85.00,87.00,89.00,91.00,93.00,95.00,97.00,99.00,101.00,103.00,105.00,107.00,109.00,111.00,113.00,115.00,117.00,119.00,121.00,123.00,125.00,127.00,129.00,131.00,133.00,135.00,137.00,139.00,141.00,143.00,145.00,147.00,149.00,151.00,153.00,155.00,157.00,159.00,161.00,163.00,165.00,167.00,169.00,171.00,173.00,175.00,177.00,179.00,181.00,183.00,185.00,187.00,189.00,191.00,193.00,195.00,197.00,199.00,201.00,203.00,205.00,207.00,209.00,211.00,213.00,215.00,217.00,219.00,221.00,223.00,225.00,227.00,229.00,231.00,233.00,235.00,237.00,239.00,241.00,243.00,245.00,247.00,249.00,251.00,253.00,255.00,257.00,259.00,261.00,263.00,265.00,267.00,271.00,275.00,279.00,283.00,287.00,291.00,295.00,299.00,303.00,307.00,311.00,315.00,319.00,323.00,327.00,331.00,335.00,341.00,345.00,351.00,357.00,363.00,369.00,375.00,381.00,387.00,395.00,403.00,411.00,419.00,427.00,437.00,447.00,459.00,471.00,485.00,499.00,515.00,533.00,557.00,587.00,623.00,673.00,755.00,999.00,}},
{"VJets", {25.00,27.00,29.00,31.00,33.00,35.00,37.00,39.00,43.00,47.00,51.00,55.00,59.00,63.00,69.00,75.00,83.00,93.00,103.00,113.00,127.00,143.00,161.00,187.00,219.00,267.00,357.00,999.00,}},
{"ST", {25.00,27.00,29.00,31.00,33.00,35.00,37.00,39.00,41.00,43.00,45.00,47.00,49.00,51.00,53.00,55.00,57.00,59.00,61.00,63.00,65.00,67.00,69.00,71.00,73.00,75.00,77.00,79.00,81.00,83.00,85.00,87.00,89.00,91.00,93.00,95.00,97.00,99.00,101.00,103.00,105.00,107.00,109.00,111.00,113.00,115.00,117.00,119.00,121.00,123.00,125.00,127.00,129.00,131.00,133.00,135.00,137.00,139.00,141.00,143.00,145.00,147.00,149.00,151.00,153.00,155.00,157.00,159.00,161.00,163.00,165.00,167.00,169.00,171.00,173.00,175.00,177.00,179.00,181.00,183.00,185.00,187.00,189.00,191.00,193.00,195.00,197.00,199.00,203.00,207.00,209.00,213.00,217.00,221.00,225.00,229.00,233.00,237.00,241.00,245.00,249.00,253.00,257.00,261.00,267.00,273.00,279.00,285.00,291.00,297.00,305.00,313.00,319.00,327.00,335.00,343.00,353.00,365.00,375.00,389.00,403.00,421.00,439.00,461.00,491.00,527.00,577.00,669.00,999.00,}},
{"ttV", {25.00,27.00,29.00,31.00,33.00,35.00,37.00,39.00,41.00,43.00,45.00,47.00,49.00,51.00,53.00,55.00,57.00,59.00,61.00,63.00,65.00,67.00,69.00,71.00,73.00,75.00,77.00,79.00,81.00,83.00,85.00,87.00,89.00,91.00,93.00,95.00,97.00,99.00,101.00,103.00,105.00,107.00,109.00,111.00,113.00,115.00,117.00,119.00,121.00,123.00,125.00,127.00,129.00,131.00,133.00,135.00,137.00,139.00,141.00,143.00,145.00,147.00,149.00,151.00,153.00,155.00,157.00,159.00,161.00,163.00,165.00,167.00,169.00,171.00,173.00,175.00,177.00,179.00,181.00,183.00,187.00,191.00,195.00,199.00,203.00,207.00,211.00,215.00,219.00,223.00,227.00,231.00,235.00,239.00,243.00,249.00,255.00,261.00,267.00,273.00,279.00,287.00,295.00,303.00,311.00,321.00,331.00,343.00,355.00,369.00,385.00,401.00,421.00,443.00,469.00,501.00,543.00,599.00,695.00,999.00,}},
{"VV", {25.00,27.00,29.00,31.00,33.00,35.00,37.00,39.00,41.00,43.00,45.00,47.00,49.00,51.00,53.00,55.00,57.00,59.00,61.00,63.00,65.00,67.00,69.00,71.00,73.00,75.00,77.00,79.00,81.00,83.00,85.00,87.00,89.00,91.00,93.00,95.00,97.00,99.00,101.00,103.00,105.00,107.00,109.00,111.00,113.00,115.00,117.00,119.00,121.00,123.00,125.00,127.00,129.00,131.00,133.00,135.00,137.00,139.00,141.00,143.00,145.00,147.00,149.00,151.00,153.00,155.00,157.00,159.00,163.00,167.00,171.00,175.00,179.00,183.00,187.00,191.00,195.00,199.00,203.00,207.00,211.00,217.00,221.00,225.00,229.00,235.00,241.00,247.00,253.00,261.00,267.00,273.00,281.00,289.00,297.00,307.00,317.00,327.00,339.00,353.00,369.00,385.00,405.00,427.00,457.00,487.00,533.00,595.00,689.00,999.00,}},
};
Vcb_DL_eta_binning_flav_0 = {
{"TTLJ", {0.00,0.40,1.60,2.40,}},
{"TTLJ_Vcb", {0.00,1.20,2.40,}},
{"TTLL", {0.00,0.20,0.80,1.10,1.40,1.70,2.40,}},
{"VJets", {0.00,0.40,1.50,2.40,}},
{"ST", {0.00,0.30,1.30,2.40,}},
{"ttV", {0.00,0.10,0.70,1.00,1.30,1.70,2.40,}},
{"VV", {0.00,0.20,1.10,2.40,}},
};

Vcb_FH_pt_binning_flav_5 = {
{"TTJJ", {25.00,27.00,29.00,31.00,33.00,35.00,37.00,39.00,41.00,43.00,45.00,47.00,49.00,51.00,53.00,55.00,57.00,59.00,61.00,63.00,65.00,67.00,69.00,71.00,73.00,75.00,77.00,79.00,81.00,83.00,85.00,87.00,89.00,91.00,93.00,95.00,97.00,99.00,101.00,103.00,105.00,107.00,109.00,111.00,113.00,115.00,117.00,119.00,121.00,123.00,125.00,127.00,129.00,131.00,133.00,135.00,137.00,139.00,141.00,143.00,145.00,147.00,149.00,151.00,153.00,155.00,157.00,159.00,163.00,167.00,171.00,175.00,179.00,183.00,187.00,191.00,195.00,199.00,205.00,211.00,217.00,223.00,231.00,239.00,249.00,261.00,275.00,293.00,317.00,355.00,431.00,999.00,}},
{"TTJJ_Vcb", {25.00,27.00,29.00,31.00,33.00,35.00,37.00,39.00,41.00,43.00,45.00,47.00,49.00,51.00,53.00,55.00,57.00,59.00,61.00,63.00,65.00,67.00,69.00,71.00,73.00,75.00,77.00,79.00,81.00,83.00,85.00,87.00,89.00,91.00,93.00,95.00,97.00,99.00,101.00,103.00,105.00,107.00,109.00,111.00,113.00,115.00,117.00,119.00,121.00,123.00,125.00,127.00,129.00,131.00,133.00,135.00,137.00,139.00,141.00,143.00,145.00,147.00,149.00,151.00,153.00,155.00,159.00,163.00,167.00,171.00,175.00,179.00,183.00,187.00,191.00,195.00,201.00,207.00,213.00,221.00,229.00,237.00,247.00,259.00,273.00,291.00,317.00,357.00,435.00,999.00,}},
{"QCD", {25.00,27.00,31.00,35.00,39.00,41.00,43.00,45.00,47.00,49.00,51.00,55.00,59.00,63.00,67.00,71.00,75.00,79.00,83.00,87.00,91.00,95.00,99.00,103.00,107.00,111.00,117.00,123.00,129.00,135.00,141.00,147.00,153.00,159.00,165.00,171.00,179.00,187.00,195.00,203.00,211.00,219.00,227.00,237.00,247.00,257.00,267.00,277.00,287.00,297.00,309.00,321.00,333.00,345.00,359.00,373.00,387.00,401.00,415.00,431.00,447.00,463.00,479.00,495.00,513.00,531.00,549.00,567.00,585.00,603.00,621.00,641.00,661.00,681.00,701.00,721.00,741.00,763.00,785.00,807.00,829.00,853.00,877.00,903.00,931.00,963.00,999.00,}},
};
Vcb_FH_eta_binning_flav_5 = {
{"TTJJ", {0.00,0.10,0.50,0.70,0.90,1.10,1.40,2.40,}},
{"TTJJ_Vcb", {0.00,0.10,0.50,0.70,0.90,1.10,1.40,2.40,}},
{"QCD", {0.00,0.30,0.90,1.20,2.40,}},
};
Vcb_FH_pt_binning_flav_4 = {
{"TTJJ", {25.00,27.00,29.00,31.00,33.00,35.00,37.00,39.00,41.00,43.00,45.00,47.00,49.00,51.00,53.00,55.00,57.00,59.00,61.00,63.00,65.00,67.00,69.00,71.00,73.00,75.00,77.00,79.00,81.00,83.00,85.00,87.00,89.00,91.00,93.00,95.00,97.00,99.00,101.00,103.00,105.00,107.00,109.00,113.00,117.00,121.00,125.00,129.00,133.00,137.00,141.00,145.00,149.00,155.00,161.00,167.00,173.00,181.00,189.00,199.00,211.00,225.00,243.00,269.00,309.00,389.00,999.00,}},
{"TTJJ_Vcb", {25.00,27.00,29.00,31.00,33.00,35.00,37.00,39.00,41.00,43.00,45.00,47.00,49.00,51.00,53.00,55.00,57.00,59.00,61.00,63.00,65.00,67.00,69.00,71.00,73.00,75.00,77.00,79.00,81.00,83.00,85.00,87.00,89.00,91.00,93.00,95.00,97.00,99.00,101.00,103.00,105.00,107.00,111.00,115.00,119.00,123.00,127.00,131.00,135.00,139.00,143.00,147.00,153.00,159.00,165.00,171.00,177.00,185.00,193.00,203.00,215.00,231.00,253.00,285.00,347.00,999.00,}},
{"QCD", {25.00,27.00,29.00,31.00,33.00,37.00,39.00,41.00,43.00,45.00,47.00,49.00,51.00,53.00,55.00,57.00,59.00,61.00,65.00,69.00,73.00,77.00,81.00,85.00,89.00,93.00,97.00,101.00,105.00,109.00,113.00,117.00,123.00,129.00,135.00,141.00,147.00,153.00,159.00,165.00,171.00,177.00,185.00,193.00,201.00,209.00,217.00,225.00,233.00,243.00,253.00,263.00,273.00,283.00,293.00,303.00,315.00,327.00,339.00,351.00,363.00,377.00,391.00,405.00,419.00,433.00,447.00,463.00,479.00,495.00,511.00,527.00,543.00,561.00,579.00,597.00,615.00,633.00,651.00,669.00,687.00,705.00,723.00,741.00,759.00,779.00,799.00,819.00,839.00,859.00,879.00,901.00,923.00,947.00,971.00,999.00,}},
};
Vcb_FH_eta_binning_flav_4 = {
{"TTJJ", {0.00,0.20,0.60,0.80,1.00,1.30,1.60,2.40,}},
{"TTJJ_Vcb", {0.00,0.20,0.60,0.80,1.00,1.30,1.70,2.40,}},
{"QCD", {0.00,0.10,0.50,0.70,0.90,1.10,1.40,2.40,}},
};
Vcb_FH_pt_binning_flav_0 = {
{"TTJJ", {25.00,27.00,29.00,31.00,33.00,35.00,37.00,39.00,41.00,43.00,45.00,47.00,49.00,51.00,53.00,55.00,57.00,59.00,61.00,63.00,65.00,67.00,69.00,71.00,73.00,75.00,77.00,79.00,81.00,83.00,85.00,87.00,89.00,91.00,93.00,95.00,97.00,99.00,101.00,103.00,105.00,107.00,109.00,111.00,113.00,115.00,117.00,119.00,121.00,123.00,125.00,127.00,129.00,131.00,133.00,135.00,137.00,139.00,141.00,143.00,145.00,147.00,149.00,151.00,153.00,155.00,157.00,159.00,161.00,163.00,165.00,167.00,169.00,171.00,173.00,175.00,177.00,179.00,181.00,183.00,187.00,191.00,195.00,199.00,203.00,207.00,211.00,215.00,219.00,223.00,227.00,231.00,237.00,243.00,249.00,255.00,261.00,269.00,277.00,287.00,297.00,309.00,323.00,339.00,357.00,379.00,405.00,441.00,491.00,577.00,999.00,}},
{"TTJJ_Vcb", {25.00,27.00,29.00,31.00,33.00,35.00,37.00,39.00,41.00,43.00,45.00,47.00,49.00,51.00,53.00,55.00,57.00,59.00,61.00,63.00,65.00,67.00,69.00,71.00,73.00,75.00,77.00,79.00,81.00,83.00,85.00,87.00,89.00,91.00,93.00,95.00,97.00,99.00,101.00,103.00,105.00,107.00,109.00,111.00,113.00,115.00,117.00,119.00,121.00,123.00,125.00,127.00,129.00,131.00,133.00,135.00,137.00,139.00,141.00,143.00,145.00,149.00,153.00,157.00,161.00,165.00,169.00,173.00,177.00,181.00,185.00,189.00,195.00,201.00,207.00,213.00,219.00,225.00,233.00,241.00,251.00,261.00,273.00,287.00,303.00,321.00,343.00,369.00,405.00,455.00,543.00,999.00,}},
{"QCD", {25.00,27.00,29.00,31.00,33.00,35.00,37.00,39.00,41.00,43.00,45.00,47.00,49.00,51.00,53.00,55.00,57.00,59.00,61.00,63.00,65.00,67.00,69.00,71.00,73.00,75.00,77.00,79.00,81.00,83.00,85.00,87.00,89.00,91.00,93.00,95.00,97.00,99.00,101.00,103.00,105.00,107.00,109.00,111.00,113.00,115.00,117.00,119.00,121.00,123.00,125.00,127.00,129.00,131.00,133.00,135.00,137.00,139.00,141.00,143.00,145.00,147.00,149.00,151.00,153.00,155.00,157.00,159.00,161.00,163.00,165.00,167.00,169.00,171.00,173.00,175.00,177.00,179.00,181.00,183.00,185.00,187.00,189.00,191.00,193.00,195.00,197.00,199.00,201.00,203.00,205.00,207.00,209.00,211.00,213.00,215.00,217.00,219.00,221.00,223.00,225.00,227.00,229.00,231.00,233.00,235.00,237.00,239.00,241.00,243.00,245.00,247.00,249.00,251.00,253.00,255.00,257.00,259.00,261.00,263.00,265.00,267.00,269.00,271.00,273.00,275.00,277.00,279.00,281.00,283.00,285.00,287.00,289.00,291.00,293.00,295.00,297.00,299.00,301.00,303.00,305.00,307.00,309.00,311.00,313.00,315.00,317.00,319.00,321.00,323.00,325.00,327.00,329.00,331.00,335.00,339.00,343.00,347.00,351.00,355.00,359.00,363.00,367.00,371.00,375.00,379.00,383.00,387.00,391.00,395.00,399.00,403.00,407.00,411.00,415.00,419.00,423.00,427.00,431.00,435.00,439.00,443.00,447.00,451.00,455.00,459.00,463.00,467.00,471.00,475.00,479.00,483.00,487.00,491.00,495.00,499.00,503.00,507.00,511.00,515.00,519.00,523.00,527.00,531.00,535.00,539.00,543.00,547.00,551.00,555.00,559.00,563.00,567.00,571.00,575.00,579.00,583.00,587.00,591.00,595.00,599.00,603.00,607.00,611.00,615.00,619.00,623.00,627.00,631.00,635.00,639.00,643.00,647.00,651.00,655.00,659.00,663.00,667.00,671.00,675.00,679.00,683.00,687.00,691.00,695.00,699.00,703.00,707.00,711.00,715.00,719.00,723.00,727.00,731.00,735.00,739.00,743.00,747.00,751.00,755.00,759.00,763.00,767.00,771.00,775.00,779.00,783.00,787.00,791.00,795.00,799.00,803.00,807.00,811.00,815.00,819.00,823.00,827.00,831.00,835.00,839.00,843.00,847.00,851.00,855.00,859.00,863.00,867.00,871.00,875.00,879.00,883.00,887.00,891.00,895.00,899.00,903.00,907.00,911.00,915.00,919.00,923.00,927.00,931.00,935.00,939.00,943.00,947.00,951.00,955.00,959.00,963.00,969.00,975.00,981.00,987.00,993.00,999.00,}},
};
Vcb_FH_eta_binning_flav_0 = {
{"TTJJ", {0.00,0.20,0.60,0.80,1.10,1.40,1.70,2.40,}},
{"TTJJ_Vcb", {0.00,0.30,0.90,1.20,1.50,1.80,2.40,}},
{"QCD", {0.00,0.10,0.50,0.70,0.90,1.20,1.50,2.40,}},
};

vector<float> pt_temp = {20.f,25.f,30.f,40.f,50.f,70.f,90.f,120.f,150.f,200.f,300.f,500.f};
vector<float> eta_temp = {0.f,0.2,0.4,0.6,0.8,1.f,1.2,1.48,1.8,2.1,2.4};

Vcb_SL_pt_binning[5] = Vcb_SL_pt_binning_flav_5;
Vcb_SL_eta_binning[5] = Vcb_SL_eta_binning_flav_5;
Vcb_SL_pt_binning[4] = Vcb_SL_pt_binning_flav_4;
Vcb_SL_eta_binning[4] = Vcb_SL_eta_binning_flav_4;
Vcb_SL_pt_binning[0] = Vcb_SL_pt_binning_flav_0;
Vcb_SL_eta_binning[0] = Vcb_SL_eta_binning_flav_0;

Vcb_DL_pt_binning[5] = Vcb_DL_pt_binning_flav_5;
Vcb_DL_eta_binning[5] = Vcb_DL_eta_binning_flav_5;
Vcb_DL_pt_binning[4] = Vcb_DL_pt_binning_flav_4;
Vcb_DL_eta_binning[4] = Vcb_DL_eta_binning_flav_4;
Vcb_DL_pt_binning[0] = Vcb_DL_pt_binning_flav_0;
Vcb_DL_eta_binning[0] = Vcb_DL_eta_binning_flav_0;

Vcb_FH_pt_binning[5] = Vcb_FH_pt_binning_flav_5;
Vcb_FH_eta_binning[5] = Vcb_FH_eta_binning_flav_5;
Vcb_FH_pt_binning[4] = Vcb_FH_pt_binning_flav_4;
Vcb_FH_eta_binning[4] = Vcb_FH_eta_binning_flav_4;
Vcb_FH_pt_binning[0] = Vcb_FH_pt_binning_flav_0;
Vcb_FH_eta_binning[0] = Vcb_FH_eta_binning_flav_0;


// 람다로 중복 제거
auto apply_binning = [&](auto& pt_map, auto& eta_map) {
    for (auto& [sample, bins] : pt_map) {
        bins = pt_temp;
    }
    for (auto& [sample, bins] : eta_map) {
        bins = eta_temp;
    }
};

// SL
apply_binning(Vcb_SL_pt_binning[0], Vcb_SL_eta_binning[0]);
apply_binning(Vcb_SL_pt_binning[4], Vcb_SL_eta_binning[4]);
apply_binning(Vcb_SL_pt_binning[5], Vcb_SL_eta_binning[5]);

// DL
apply_binning(Vcb_DL_pt_binning[0], Vcb_DL_eta_binning[0]);
apply_binning(Vcb_DL_pt_binning[4], Vcb_DL_eta_binning[4]);
apply_binning(Vcb_DL_pt_binning[5], Vcb_DL_eta_binning[5]);

// FH
apply_binning(Vcb_FH_pt_binning[0], Vcb_FH_eta_binning[0]);
apply_binning(Vcb_FH_pt_binning[4], Vcb_FH_eta_binning[4]);
apply_binning(Vcb_FH_pt_binning[5], Vcb_FH_eta_binning[5]);

Vcb_pt_binning["SL"] = Vcb_SL_pt_binning;
Vcb_eta_binning["SL"] = Vcb_SL_eta_binning;
Vcb_pt_binning["DL"] = Vcb_DL_pt_binning;
Vcb_eta_binning["DL"] = Vcb_DL_eta_binning;
Vcb_pt_binning["FH"] = Vcb_FH_pt_binning;
Vcb_eta_binning["FH"] = Vcb_FH_eta_binning;


} // void MeasureJetTaggingR::initializeAnalyzer

//////////
void MeasureJetTaggingR::executeEvent()
{
    // Since We passed the fCain to the analyzer, our fChain is set one's address to analyzer's variable
    // therfore from this analyzer we can not access everyting from fChain
    std::visit([&](auto *analyzer)
               {
    if (analyzer) {
        analyzer->ev = analyzer->GetEvent();
        analyzer->AllJets = analyzer->GetAllJets();
        analyzer->AllMuons = analyzer->GetAllMuons();
        analyzer->AllElectrons = analyzer->GetAllElectrons();
        analyzer->AllGenJets = analyzer->GetAllGenJets();
        analyzer->AllGens = analyzer->GetAllGens();
        analyzer->MET = (analyzer)->ev.GetMETVector(Event::MET_Type::PUPPI);
        analyzer->Userflags = Userflags;
    } }, current_analyzer);
    makeIteratingChannels();
    executeEventFromParameter();
}

void MeasureJetTaggingR::makeIteratingChannels()
{
    if (current_channel == "FH")
        iterating_channels = {Vcb::Channel::FH};
    else if (current_channel == "Mu")
        iterating_channels = {Vcb::Channel::Mu};
    else if (current_channel == "El")
        iterating_channels = {Vcb::Channel::El};
    else if (current_channel == "MM")
        iterating_channels = {Vcb::Channel::MM};
    else if (current_channel == "ME")
        iterating_channels = {Vcb::Channel::ME};
    else if (current_channel == "EE")
        iterating_channels = {Vcb::Channel::EE};
    else if (current_channel == "DL")
        iterating_channels = {Vcb::Channel::MM, Vcb::Channel::ME, Vcb::Channel::EE};
    else if (current_channel == "SL")
        iterating_channels = {Vcb::Channel::Mu, Vcb::Channel::El};
    else
    {
        cout << "Invalid channel" << endl;
        exit(0);
    }
}

void MeasureJetTaggingR::executeEventFromParameter()
{
    string category = "total";
    unordered_map<string, float> weight_map;
    float HT = 1.;
    bool passBaseline;
    float nTrueInt = 1.;
    RVec<Jet> vec_sel_jet;

    for (const auto &ch : iterating_channels)
    {
        std::visit([&](auto *analyzer)
                   {
            if (analyzer) {
                for (const auto &syst_dummy : *analyzer->systHelper){
                    analyzer->channel = ch;
                    if(!analyzer->CheckChannel()) continue;
                    passBaseline = analyzer->PassBaseLineSelection(true); //true: remove_flavtagging_cut
                    if (!passBaseline) continue;
                    analyzer->SetSystematicLambda(true); //true: remove_flavtagging_sf
                    weight_map = analyzer->systHelper->calculateWeight();
                    vec_sel_jet = analyzer->Jets;

                    std::sort(vec_sel_jet.begin(), vec_sel_jet.end(), PtComparing);
                    
                    float default_weight = 1.;
                    default_weight = analyzer->MCNormalization(); 
                    for(const auto &weight_pair : weight_map){
                        for (unsigned int i_tagger = 0; i_tagger < Taggers.size(); i_tagger++)
                        {
                            float n_medium_btagged_jets = 0;
                            float n_medium_ctagged_jets = 0;

                            std::string this_syst = weight_pair.first;
                            float weight = weight_pair.second * default_weight;
                            myCorr->SetTaggingParam(Taggers[i_tagger], JetTagging::JetFlavTaggerWP::Medium); // We will use shape method, so WP is not important
                            //BTagWeight = myCorr->GetBTaggingSF(vec_sel_jet, JetTagging::JetTaggingSFMethod::shape);
                            //CTagWeight = myCorr->GetCTaggingSF(vec_sel_jet, JetTagging::JetTaggingSFMethod::shape);
             
                            std::vector<std::string> this_targets = analyzer->systHelper->get_targets_from_name(this_syst);
                            std::vector<std::string> this_sources = analyzer->systHelper->get_sources_from_name(this_syst);
                            MyCorrection::variation this_variation = analyzer->systHelper->get_variation_from_name(this_syst);

                            std::string source_str = "central";
                            std::string variation_str = "";
                            bool is_btag_syst = false;
                            is_btag_syst = std::find(this_targets.begin(), this_targets.end(), "btag") != this_targets.end();

                            if(is_btag_syst){
                                // get index of "btag" in this_targets TODO: have to implementaion for ctag
                                int index = std::distance(this_targets.begin(), std::find(this_targets.begin(), this_targets.end(), "btag"));
                                
                                if(this_variation == MyCorrection::variation::up){
                                    source_str = this_sources[index];
                                    variation_str = "up_";
                                }
                                else if (this_variation == MyCorrection::variation::down){
                                    source_str = this_sources[index];
                                    variation_str = "down_";
                                }
                            }

                            for(const auto &this_jet : vec_sel_jet){
                                if(this_jet.GetBTaggerResult(Taggers[i_tagger]) > myCorr->GetBTaggingWP(Taggers[i_tagger], JetTagging::JetFlavTaggerWP::Medium))
                                    n_medium_btagged_jets++;
                                if(this_jet.GetCTaggerResult(Taggers[i_tagger]).first > myCorr->GetCTaggingWP(Taggers[i_tagger], JetTagging::JetFlavTaggerWP::Medium).first &&
                                    this_jet.GetCTaggerResult(Taggers[i_tagger]).second > myCorr->GetCTaggingWP(Taggers[i_tagger], JetTagging::JetFlavTaggerWP::Medium).second)
                                    n_medium_ctagged_jets++;

                                RVec<Jet> this_jet_vec = {this_jet};
                                float BTagWeight = 1.f;
                                float CTagWeight = 1.f;

                                if(is_btag_syst){
                                    BTagWeight = myCorr->GetBTaggingSF(this_jet_vec, JetTagging::JetTaggingSFMethod::shape, this_variation, source_str);
                                    CTagWeight = myCorr->GetCTaggingSF(this_jet_vec, JetTagging::JetTaggingSFMethod::shape, this_variation, source_str);
                                }
                                else{
                                    BTagWeight = myCorr->GetBTaggingSF(this_jet_vec, JetTagging::JetTaggingSFMethod::shape);
                                    CTagWeight = myCorr->GetCTaggingSF(this_jet_vec, JetTagging::JetTaggingSFMethod::shape);
                                }

                                int this_jet_partonFlavour = abs(this_jet.partonFlavour());

                                if(this_jet_partonFlavour == 5) this_jet_partonFlavour = 5;
                                else if(this_jet_partonFlavour == 4) this_jet_partonFlavour = 4;
                                else this_jet_partonFlavour = 0;

                                

                                FillHist("tagging#b##parton_flav#" + std::to_string(this_jet_partonFlavour) + "##era#" + DataEra.Data() + "##systematic#" + this_syst + "##Hist#2D##tagger#" + JetTagging::GetTaggerCorrectionLibStr(Taggers[i_tagger]).Data() + "##num##category#" + category + "##sample#" + Sample_Shorthand[MCSample.Data()] + "##variation#" + variation_str + source_str, this_jet.Pt(), abs(this_jet.Eta()), weight, Vcb_pt_binning.at(current_channel.Data()).at(this_jet_partonFlavour).at(Sample_Shorthand[MCSample.Data()]), Vcb_eta_binning.at(current_channel.Data()).at(this_jet_partonFlavour).at(Sample_Shorthand[MCSample.Data()]));
                                FillHist("tagging#c##parton_flav#" + std::to_string(this_jet_partonFlavour) + "##era#" + DataEra.Data() + "##systematic#" + this_syst + "##Hist#2D##tagger#" + JetTagging::GetTaggerCorrectionLibStr(Taggers[i_tagger]).Data() + "##num##category#" + category + "##sample#" + Sample_Shorthand[MCSample.Data()] + "##variation#" + variation_str + source_str, this_jet.Pt(), abs(this_jet.Eta()), weight, Vcb_pt_binning.at(current_channel.Data()).at(this_jet_partonFlavour).at(Sample_Shorthand[MCSample.Data()]), Vcb_eta_binning.at(current_channel.Data()).at(this_jet_partonFlavour).at(Sample_Shorthand[MCSample.Data()]));
                                FillHist("tagging#b##parton_flav#" + std::to_string(this_jet_partonFlavour) + "##era#" + DataEra.Data() + "##systematic#" + this_syst + "##Hist#2D##tagger#" + JetTagging::GetTaggerCorrectionLibStr(Taggers[i_tagger]).Data() + "##den##category#" + category + "##sample#" + Sample_Shorthand[MCSample.Data()] + "##variation#" + variation_str + source_str, this_jet.Pt(), abs(this_jet.Eta()), weight * BTagWeight, Vcb_pt_binning.at(current_channel.Data()).at(this_jet_partonFlavour).at(Sample_Shorthand[MCSample.Data()]), Vcb_eta_binning.at(current_channel.Data()).at(this_jet_partonFlavour).at(Sample_Shorthand[MCSample.Data()]));
                                FillHist("tagging#c##parton_flav#" + std::to_string(this_jet_partonFlavour) + "##era#" + DataEra.Data() + "##systematic#" + this_syst + "##Hist#2D##tagger#" + JetTagging::GetTaggerCorrectionLibStr(Taggers[i_tagger]).Data() + "##den##category#" + category + "##sample#" + Sample_Shorthand[MCSample.Data()] + "##variation#" + variation_str + source_str, this_jet.Pt(), abs(this_jet.Eta()), weight * CTagWeight, Vcb_pt_binning.at(current_channel.Data()).at(this_jet_partonFlavour).at(Sample_Shorthand[MCSample.Data()]), Vcb_eta_binning.at(current_channel.Data()).at(this_jet_partonFlavour).at(Sample_Shorthand[MCSample.Data()]));
                                
                                FillHist("parton_flav#" + std::to_string(this_jet_partonFlavour) + "##tagger#" + JetTagging::GetTaggerCorrectionLibStr(Taggers[i_tagger]).Data() +"_BvsC_" + this_syst, this_jet.GetBTaggerResult(Taggers[i_tagger]), weight, 100, 0.f, 1.f);
                                FillHist("parton_flav#" + std::to_string(this_jet_partonFlavour) + "##tagger#" + JetTagging::GetTaggerCorrectionLibStr(Taggers[i_tagger]).Data() +"_CvsB_" + this_syst, this_jet.GetCTaggerResult(Taggers[i_tagger]).first, weight, 100, 0.f, 1.f);
                                FillHist("parton_flav#" + std::to_string(this_jet_partonFlavour) + "##tagger#" + JetTagging::GetTaggerCorrectionLibStr(Taggers[i_tagger]).Data() +"_CvsL_" + this_syst, this_jet.GetCTaggerResult(Taggers[i_tagger]).second, weight, 100, 0.f, 1.f);

                                //only for Central
                                if(this_syst == "Central" && i_tagger == 0)
                                FillHist("parton_flav#" + std::to_string(this_jet_partonFlavour) + "##sample#"+Sample_Shorthand[MCSample.Data()]  + "_superfine_pteta", this_jet.Pt(), abs(this_jet.Eta()), weight>0 ? 1 : -1, vec_jet_superfine_ptbin, vec_jet_superfine_etabin);

                                FillHist(JetTagging::GetTaggerCorrectionLibStr(Taggers[i_tagger]) + "/BTaggingWeight_" + this_syst, BTagWeight, 1.f, 100, 0.f, 3.f);
                                FillHist(JetTagging::GetTaggerCorrectionLibStr(Taggers[i_tagger]) + "/CTaggingWeight_" + this_syst, CTagWeight, 1.f, 100, 0.f, 3.f);
                                FillHist(JetTagging::GetTaggerCorrectionLibStr(Taggers[i_tagger]) + "/LeadingJet_BTaggingScore_BvsC_" + this_syst, vec_sel_jet[0].GetBTaggerResult(Taggers[i_tagger]), weight, 100, 0.f, 1.f);
                                FillHist(JetTagging::GetTaggerCorrectionLibStr(Taggers[i_tagger]) + "/LeadingJet_CTaggingScore_CvsB_" + this_syst, vec_sel_jet[0].GetCTaggerResult(Taggers[i_tagger]).first, weight, 100, 0.f, 1.f);
                                FillHist(JetTagging::GetTaggerCorrectionLibStr(Taggers[i_tagger]) + "/LeadingJet_CTaggingScore_CvsL_" + this_syst, vec_sel_jet[0].GetCTaggerResult(Taggers[i_tagger]).second, weight, 100, 0.f, 1.f);
                                
                            }
                            FillHist("n_medium_btagged_jets_" + this_syst, n_medium_btagged_jets, weight, 10, 0, 10);
                            FillHist("n_medium_ctagged_jets_" + this_syst, n_medium_ctagged_jets, weight, 10, 0, 10);
                        }
                    }
                }
            } }, current_analyzer);
    }
}
